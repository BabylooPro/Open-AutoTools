# INFO: USE THIS COMMAND TO CREATE A NEW RELEASE:
# git tag v1.0.0
# git push origin v1.0.0

name: Publish to PyPI
run-name: "Release ${{ github.ref_name }}"

on:
  push:
    tags:
      - "v*"

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: master
          fetch-depth: 0

      - name: Update version in setup.py
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          sed -i "s/version='[^']*'/version='$VERSION'/" setup.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout master
          git commit -am "updated: version to ${{ github.ref_name }}"
          git push origin master

  create-release:
    needs: update-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create Release ZIP
        run: |
          zip -r Open-AutoTools-${{ github.ref_name }}.zip . -x "*.git*"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: Open-AutoTools-${{ github.ref_name }}.zip
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  deploy:
    needs: [update-version, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            setup.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
        run: |
          twine upload dist/*

# INFO: USE THIS COMMAND TO CREATE A NEW DEV TEST:
# git tag v0.0.3-rc.6.dev1
# git push origin v0.0.3-rc.6.dev1
# OR FOR BETA:
# git tag v1.0.0b1.dev1
# git push origin v1.0.0b1.dev1

name: Test Publish to TestPyPI
run-name: "Test Release ${{ github.ref_name }}"

on:
  push:
    tags: # MATCH .dev TAGS
      - "v[0-9]+.[0-9]+.[0-9]+.dev[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+.dev[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+.dev[0-9][0-9]*"
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+.dev[0-9][0-9]*"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+.dev[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+.dev[0-9][0-9]*"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          check-latest: true

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
            ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-
            ${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libffi-dev \
            portaudio19-dev python3-pyaudio gcc g++ make \
            cmake pkg-config libicu-dev zlib1g-dev libcurl4-openssl-dev \
            openjdk-11-jdk xclip xvfb
        timeout-minutes: 5

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]
          pip install pytest pytest-cov pytest-timeout
          python -m spacy download en_core_web_sm
        timeout-minutes: 10

      - name: Run tests
        env:
          CI: true
        run: |
          xvfb-run pytest -vv --cov=autotools --cov-report=term-missing \
            --timeout=120 --timeout-method=thread \
            --capture=no \
            --full-trace \
            -vv --durations=0 --showlocals \
            --log-cli-level=DEBUG \
            --tb=long \
            -s \
            -v
        timeout-minutes: 10

  update-version:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: master
          fetch-depth: 0

      - name: Update version in setup.py
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          sed -i "s/version='[^']*'/version='$VERSION'/" setup.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout master

          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -am "updated: version to ${{ github.ref_name }}"
            git push origin master
          fi

  deploy:
    needs: [update-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            setup.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Build package
        run: python -m build

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_API_KEY }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          twine upload --repository testpypi dist/*

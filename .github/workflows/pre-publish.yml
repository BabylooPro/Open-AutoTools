# INFO: USE THIS COMMAND TO CREATE A NEW PRE-RELEASE:
# git tag v1.0.0-rc.1
# git push origin v1.0.0-rc.1

name: Pre-Publish to PyPI
run-name: "Pre-Release ${{ github.ref_name }}"

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-rc*"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # EXPLICIT TIMEOUT FOR THE ENTIRE JOB
    strategy:
      matrix:
        python-version: ["3.12"]
      fail-fast: false # CONTINUE OTHER TESTS IF ONE FAILS
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            setup.py

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libffi-dev \
            portaudio19-dev python3-pyaudio gcc g++ make \
            cmake pkg-config libicu-dev zlib1g-dev libcurl4-openssl-dev \
            openjdk-11-jdk xclip xvfb
        timeout-minutes: 5 # TIMEOUT FOR SYSTEM DEPS INSTALLATION

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]
          pip install pytest pytest-cov pytest-timeout
          python -m spacy download en_core_web_sm
        timeout-minutes: 10 # TIMEOUT FOR PYTHON DEPS INSTALLATION

      - name: Run tests
        env:
          CI: true
        run: |
          xvfb-run pytest -vv --cov=autotools --cov-report=term-missing \
            --timeout=120 --timeout-method=thread \
            --capture=no \
            --full-trace \
            -vv --durations=0 --showlocals \
            --log-cli-level=DEBUG \
            --tb=long \
            -s \
            -v
        timeout-minutes: 10 # TIMEOUT FOR TEST EXECUTION

  update-version:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: master
          fetch-depth: 0

      - name: Update version in setup.py
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          sed -i "s/version='[^']*'/version='$VERSION'/" setup.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout master

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -am "updated: version to ${{ github.ref_name }}"
            git push origin master
          fi

  create-release:
    needs: update-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Previous RC Tag
        run: |
          CURRENT_TAG="${{ github.ref_name }}"
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -A 1 "^$CURRENT_TAG$" | tail -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Extract Commit Messages
        run: |
          COMMIT_MESSAGES=$(git log --pretty=format:"%s" ${{ env.PREVIOUS_TAG }}..${{ github.ref_name }} | \
            grep -iv "README.md\|TODO.md\|LICENSE\|.gitignore\|.*[(]workflow[)].*")
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release ZIP
        run: |
          zip -r Open-AutoTools-${{ github.ref_name }}.zip . -x "*.git*"

      - name: Extract Release Notes
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          RELEASE_NOTES=$(awk -v ver="$VERSION" '
            BEGIN { found=0; buffer="" }
            $0 ~ "^## \\[" ver "\\]" { found=1; next }
            found && /^## / { exit }
            found { buffer = buffer $0 "\n" }
            END { print buffer }
          ' CHANGELOG.md)

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Pre-Release
        uses: softprops/action-gh-release@v1
        with:
          files: Open-AutoTools-${{ github.ref_name }}.zip
          tag_name: ${{ github.ref_name }}
          name: Pre-Release ${{ github.ref_name }}
          body: |
            ${{ env.RELEASE_NOTES }}

            ## Commits since ${{ env.PREVIOUS_TAG }}:
            ${{ env.COMMIT_MESSAGES }}
          draft: false
          prerelease: true
          generate_release_notes: false

  deploy:
    needs: [update-version, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            setup.py

      - name: Verify files
        run: |
          ls -la
          echo "Content of requirements.txt:"
          cat requirements.txt
          echo "Content of setup.py:"
          cat setup.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel readme-renderer

      - name: Build package
        run: python -m build

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
        run: |
          twine upload dist/*
